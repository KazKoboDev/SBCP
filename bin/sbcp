#!/usr/bin/env ruby

# SBCP - Starbound Server Management Solution for Linux Servers
# Copyright (C) 2016 Kazyyk

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'

o = OptionParser.new do |opts|
	opts.banner = 'Usage: sbcp [options]'
	opts.on('-s', '--start [MODE]', 'Starts SBCP in either CLI or GUI mode (Default: CLI)') do |mode|
		mode = 'CLI' if mode == nil # Sets default behavior to CLI mode
		case mode.upcase
		when 'CLI'
			require_relative '../lib/sbcp/daemon'
			SBCP::Daemon.run
		when 'GUI'
			puts 'GUI mode is not yet implemented.'
		end
	end
	opts.on('-r', '--restart', 'Gracefully restarts the Starbound server') do
		# TODO
	end
	opts.on('-R', '--reboot', 'Forcibly restarts the Starbound server') do
		# TODO
	end
	opts.on('-g', '--grace', 'Gracefully stops the Starbound server') do
		# TODO
	end
	opts.on('-K', '--kill', 'Forcibly stops the Starbound server') do
		# TODO
	end
	opts.on('-k', '--kick PLAYER', 'Kicks a specified player by [Account, Name, IP]') do |player|
		# TODO
	end
	opts.on('-b', '--ban PLAYER', 'Bans a specified player by [Account, Name, IP]') do |player|
		# TODO
	end
	opts.on('-u', '--unban PLAYER', 'Unbans a specified player by [Account, Name, IP]') do |player|
		# TODO
	end
	opts.on('-l', '--list TYPE', [:bans, :connections, :logs], 'Lists the last 50 lines of [bans, connections, logs].') do |type|
		# TODO
	end
	opts.on('-B', '--backup TYPE', [:starbound, :sbcp, :full],'Creates a [starbound, sbcp, full] backup.') do |type|
		require_relative '../lib/sbcp/backup'
		puts "Initiating #{type.upcase} backup..."
		SBCP::Backup.create_backup(type)
		puts 'Backup has completed successfully.'
	end
	opts.on('-e', '--exit', 'Gracefully stops SBCP') do
		# TODO
	end
	opts.on('-a', '--abort', 'Forcibly stops SBCP') do
		# TODO
	end
	opts.on_tail('-c', '--config', 'Opens the interactive configuration menu') do
		require_relative '../lib/sbcp/configuration'
		SBCP::Configuration.menu(:main)
	end
	opts.on_tail('-h', '--help', 'Opens the interactive documentation menu') do
		require_relative '../lib/sbcp/help'
		SBCP::Help.menu(:main)
	end
	opts.on_tail('-v', '--version', 'Displays the current SBCP version') do
		require_relative '../lib/sbcp/version'
		puts SBCP::VERSION
	end
end

ARGV << '-h' if ARGV.empty? # Displays help if no arguements given.
begin o.parse!
rescue OptionParser::MissingArgument => e
	puts e
	puts 'Please provide an arguement.'
	puts "Example: sbcp #{e.to_s.split(' ').last} <arg>"
rescue OptionParser::InvalidArgument => e
	puts e
	flag = e.to_s.split(' ')[2]
	case flag
	when '-k'
		puts 'Please provide uuid, name, or ip as an arguement.'
		puts "Example: sbcp #{flag} uuid"
	when '-b'
		puts 'Please provide uuid, name, or ip as an arguement.'
		puts "Example: sbcp #{flag} name"
	when '-u'
		puts 'Please provide uuid, name, or ip as an arguement.'
		puts "Example: sbcp #{flag} ip"
	when '-l'
		puts 'Please provide bans, connections, or logs as an arguement.'
		puts "Example: sbcp #{flag} bans"
	when '-B'
		puts 'Please provide starbound, sbcp, or full as an arguement.'
		puts "Example: sbcp #{flag} starbound"
	end
rescue OptionParser::InvalidOption => e
	puts e
	puts o 
	exit 1
end