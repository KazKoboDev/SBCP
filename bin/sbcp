#!/usr/bin/env ruby

# SBCP - Starbound Server Management Solution for Linux Servers
# Copyright (C) 2016 Kazyyk

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'
require 'highline'
require_relative '../lib/sbcp/version'

o = OptionParser.new do |opts|
	opts.banner = 'Usage: sbcp [options]'

	# This starts SBCP and creates the underlying daemon process.
	# The daemon process is responsible for maintaining the server.
	# There are two modes, Command Line Interface and Graphical User Interface.
	# CLI mode disables the web server to improve performance.

	opts.on('-s', '--start [MODE]', 'Starts SBCP in either CLI or GUI mode (Default: CLI)') do |mode|
		mode = 'CLI' if mode == nil
		case mode.upcase
		when 'CLI'
			@cli.say('The control panel has been started in CLI mode.')
			@cli.say('The Starbound server has also been started.')
			require_relative '../lib/sbcp/daemon'
			SBCP::Daemon.run
		when 'GUI'
			abort('Currently unsupported.')
			#require '../lib/sbcp'
			#SBCP::Panel.run!
			#puts "The control panel has been started in GUI mode."
			#puts "Access the GUI at <ipaddress>:4567 in your web browser."
		else
			@cli.say('Please provide either CLI or GUI as an arguement.')
		end
	end

	# Attempts to gracefully stop the server without fully shutting it down.
	# This may not always be successful, as Starbound is sometimes unreceptive to kill signals.

	opts.on('-r', '--restart', 'Gracefully restarts the Starbound server') do
		if @cli.agree('This will attempt to gracefully restart the server. Are you sure? (y/n)') then
			@cli.say('Attempting to gracefully restart the server...')
			pid = `pidof starbound_server`
			if not pid.empty?
				system("kill -15 #{pid.to_i}")
				time = Time.now
				diff = 0
				until `pidof starbound_server`.empty? || diff >= 5
					sleep 1
					diff = Time.now - time
				end
				abort('Unable to stop the server for restart. Reboot command may be required.') if not `pidof starbound_server`.empty?
				@cli.say('The Starbound server has been successfully stopped and will restart automatically.')
			else
				abort('Unable to locate the Starbound server process ID. Is it running?')
			end
		else
			@cli.say('Graceful restart aborted.')
		end
	end

	# This kills the server process almost immediately.
	# This just stops it cold in it's tracks, so it's possible to lose information stored in memory.

	opts.on('-R', '--reboot', 'Forcibly restarts the Starbound server') do
		if @cli.agree('This will forcibly restart the server. Some data may be lost as a result. Are you sure? (y/n)') then
			@cli.say('Attempting to forcefully reboot the server...')
			pid = `pidof starbound_server`
			if not pid.empty?
				system("kill -9 #{pid.to_i}")
				time = Time.now
				diff = 0
				until `pidof starbound_server`.empty? || diff >= 5
					sleep 1
					diff = Time.now - time
				end
				abort('Unable to forcefully reboot the server. Try again?') if not `pidof starbound_server`.empty?
				@cli.say('The Starbound server has been successfully stopped and will restart automatically.')
			else
				abort('Unable to locate the Starbound server process ID. Is it running?')
			end
		else
			@cli.say('Force restart aborted.')
		end
	end

	# Same as the graceful restart option, only the server doesn't come back automatically.
	# We create a temporary file to indicate that we don't want the server to restart.
	# The temporary file is removed when we call file.unlink

	opts.on('-g', '--grace', 'Gracefully stops the Starbound server') do
		if @cli.agree('This will attempt to gracefully stop the server. Are you sure? (y/n)') then
			require 'tempfile'
			@cli.say('Attempting to gracefully stop the Starbound server...')
			begin
				file = Tempfile.new('sb-shutdown')
				pid = `pidof starbound_server`
				if not pid.empty?
					system("kill -15 #{pid.to_i}")
					time = Time.now
					diff = 0
					until `pidof starbound_server`.empty? || diff >= 5
						sleep 1
						diff = Time.now - time
					end
					abort('Unable to gracefully stop the server. Force may be neccesary.') if not `pidof starbound_server`.empty?
					@cli.say('The Starbound server has been successfully stopped.')
				else
					abort('Unable to locate the Starbound server process ID. Is it running?')
				end
			ensure
				file.close
				file.unlink
			end
		else
			@cli.say('Server shutdown aborted.')
		end
	end

	# Same as the force restart option, without the server coming back automatically.

	opts.on('-K', '--kill', 'Forcibly stops the Starbound server') do
		 if @cli.agree('This will forcibly stop the server. Some data may be lost as a result. Are you sure? (y/n)') then
			require 'tempfile'
			@cli.say('Attempting to forcefully stop the Starbound server...')
			begin
				file = Tempfile.new('sb-shutdown')
				pid = `pidof starbound_server`
				if not pid.empty?
					system("kill -9 #{pid.to_i}")
					time = Time.now
					diff = 0
					until `pidof starbound_server`.empty? || diff >= 5
						sleep 1
						diff = Time.now - time
					end
					abort('Unable to forcefully stop the server. Try again?') if not `pidof starbound_server`.empty?
					@cli.say('The Starbound server has been successfully stopped.')
				else
					abort('Unable to locate the Starbound server process ID. Is it running?')
				end
			ensure
				file.close
				file.unlink
			end
		else
			@cli.say('Force stop aborted.')
		end
	end

	# Allows an admin to kick a player.
	# UUIDs can be spoofed and names can be changed, so IP is the most reliable. (Although, proxies can bypass this.)
	# There will be support for Steam IDs if/when Starbound supports them.

	opts.on('-k', '--kick TYPE', [:uuid, :name, :ip], 'Kicks a specified player by either UUID, Name, or IP') do |type|
		@cli.say('This feature will be added later.')
	end

	# Same as the kick command, except for a specified time period or permanently.
	# Can be reverse with the unban command.

	opts.on('-b', '--ban TYPE', [:uuid, :name, :ip], 'Bans a specified player by either UUID, Name, or IP') do |type|
		@cli.say('This feature will be added later.')
	end

	# Removes a previously assigned ban on a player based on criteria.
	# It will return an error if the specified critera doesn't exist.

	opts.on('-u', '--unban TYPE', [:uuid, :name, :ip], 'Unbans a specified player by either UUID, Name, or IP') do |type|
		@cli.say('This feature will be added later.')
	end

	# Allows an admin to easily grab the most recent information.
	# Supports up to the last 100 lines.

	opts.on('-l', '--list TYPE', [:bans, :connections, :logs], 'Lists the last X lines of the specified data type. (bans, connections, or logs)') do |type|
		@cli.say('This feature will be added later.')
	end

	# This command creates a full backup of all Starbound and SBCP data.
	# This includes: Starbound world files, logs files, and the SBCP database.

	opts.on('-B', '--backup TYPE', [:starbound, :sbcp, :full],'Creates a backup of the specified data. (starbound, sbcp, or full)') do |type|
		if @cli.agree("Are you sure? This will start the backup process.\nIf the Starbound server is running, it may experience brief sluggishness.") then
			require_relative '../lib/sbcp/backup'
			SBCP::Backup.create_backup(type)
			@cli.say('Backup has completed successfully.')
		else
			@cli.say('Backup aborted.')
		end
	end

	# Stops the SBCP process as gently as possible.
	# It won't work if Starbound is running, so stop the Starbound server first.

	opts.on('-e', '--exit', 'Gracefully stops SBCP') do
		@cli.say("This feature is only used in GUI mode. GUI mode is not yet implemented.")
		@cli.say("In CLI mode, stopping Starbound will automatically stop SBCP.")
	end

	# Kills both SBCP and the Starbound server, if running.
	# This command needs work. It doesn't always work properly.
	# Usually, the starbound process has to be killed first.
	# After that, SBCP usually closes on it's own... making this command moot.

	opts.on('-a', '--abort', 'Forcibly stops SBCP') do
		if @cli.agree('This will attempt to forcibly stop the control panel. Some data may be lost as a result. Are you sure? (y/n)') then
			pid = `pidof starbound_server`
			if not pid.empty?
				system("kill -9 #{pid.to_i}")
				time = Time.now
				diff = 0
				until `pidof starbound_server`.empty? || diff >= 5
					sleep 1
					diff = Time.now - time
				end
				abort('Unable to forcfully close Starbound. Try closing it separately?') if not `pidof starbound_server`.empty?
			end
			if not Dir.glob('/tmp/sbcp_daemon-pid*').empty?
				pid_file = Dir.glob('/tmp/sbcp_daemon-pid*').first
				pid = File.read(pid_file)
				system("kill -9 #{pid.to_i}")
				time = Time.now
				diff = 0
				until `ps -p #{pid.to_i} -o comm=`.empty? || diff >= 5
					sleep 1
					diff = Time.now - time
				end
				abort('Unable to forcefully stop the control panel. Try again?') if not `ps -p #{pid.to_i} -o comm=`.empty?
				@cli.say('The control panel has been successfully stopped.')
			else
				@cli.say('Unable to locate the control panel process ID. Is it running?')
			end
		else
			puts 'The control panel was not aborted.'
		end
	end

	# Opens the config menu.
	# What else is there to say?

	opts.on_tail('-c', '--config', 'Opens the config menu') do
		require_relative '../lib/sbcp/config.rb'
		#@cli.say('NOTICE: SBCP must be restarted for any changes to take effect. (GUI mode only)')
		@cli.say('NOTICE: Starbound must be restarted for any changes to take effect.')
		config_menu(:main)
	end

	# This sets SBCP up for proper usage.
	# Ideally, only run once.

	opts.on_tail('-S', '--setup', 'Performs first time setup') do
		require_relative '../lib/sbcp/setup.rb'
		run_setup
	end

	# Displays help.

	opts.on_tail('-h', '--help', 'Show this message') do
		puts opts
		exit
	end
end

def ignore_exception
   begin
     yield  
   rescue Exception
  end
end

ARGV << '-h' if ARGV.empty? # Displays help if no arguements given.
@cli = HighLine.new # Initialize highline object
begin o.parse!
rescue OptionParser::MissingArgument => e
	puts e
	puts 'Please provide an arguement.'
	puts "Example: sbcp #{e.to_s.split(' ').last} <arg>"
rescue OptionParser::InvalidArgument => e
	puts e
	flag = e.to_s.split(' ')[2]
	case flag
	when '-k'
		puts 'Please provide uuid, name, or ip as an arguement.'
		puts "Example: sbcp #{flag} uuid"
	when '-b'
		puts 'Please provide uuid, name, or ip as an arguement.'
		puts "Example: sbcp #{flag} name"
	when '-u'
		puts 'Please provide uuid, name, or ip as an arguement.'
		puts "Example: sbcp #{flag} ip"
	when '-l'
		puts 'Please provide bans, connections, or logs as an arguement.'
		puts "Example: sbcp #{flag} bans"
	when '-B'
		puts 'Please provide starbound, sbcp, or full as an arguement.'
		puts "Example: sbcp #{flag} starbound"
	end
rescue OptionParser::InvalidOption => e
	puts e
	puts o 
	exit 1
end